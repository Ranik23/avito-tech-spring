// Code generated by MockGen. DO NOT EDIT.
// Source: /home/anton/avito-tech-spring/internal/service/service.go
//
// Generated by this command:
//
//	mockgen --source=/home/anton/avito-tech-spring/internal/service/service.go --destination=/home/anton/avito-tech-spring/internal/service/mock/service.go --package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/Ranik23/avito-tech-spring/internal/models/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockService) AddProduct(ctx context.Context, pvzID, productType string) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, pvzID, productType)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockServiceMockRecorder) AddProduct(ctx, pvzID, productType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockService)(nil).AddProduct), ctx, pvzID, productType)
}

// CloseReception mocks base method.
func (m *MockService) CloseReception(ctx context.Context, pvzID string) (*domain.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseReception", ctx, pvzID)
	ret0, _ := ret[0].(*domain.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseReception indicates an expected call of CloseReception.
func (mr *MockServiceMockRecorder) CloseReception(ctx, pvzID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseReception", reflect.TypeOf((*MockService)(nil).CloseReception), ctx, pvzID)
}

// CreatePVZ mocks base method.
func (m *MockService) CreatePVZ(ctx context.Context, city string) (*domain.Pvz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePVZ", ctx, city)
	ret0, _ := ret[0].(*domain.Pvz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePVZ indicates an expected call of CreatePVZ.
func (mr *MockServiceMockRecorder) CreatePVZ(ctx, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePVZ", reflect.TypeOf((*MockService)(nil).CreatePVZ), ctx, city)
}

// DeleteLastProduct mocks base method.
func (m *MockService) DeleteLastProduct(ctx context.Context, pvzID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLastProduct", ctx, pvzID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLastProduct indicates an expected call of DeleteLastProduct.
func (mr *MockServiceMockRecorder) DeleteLastProduct(ctx, pvzID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLastProduct", reflect.TypeOf((*MockService)(nil).DeleteLastProduct), ctx, pvzID)
}

// DummyLogin mocks base method.
func (m *MockService) DummyLogin(ctx context.Context, role string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DummyLogin", ctx, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DummyLogin indicates an expected call of DummyLogin.
func (mr *MockServiceMockRecorder) DummyLogin(ctx, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DummyLogin", reflect.TypeOf((*MockService)(nil).DummyLogin), ctx, role)
}

// GetPVZList mocks base method.
func (m *MockService) GetPVZList(ctx context.Context) ([]domain.Pvz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVZList", ctx)
	ret0, _ := ret[0].([]domain.Pvz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVZList indicates an expected call of GetPVZList.
func (mr *MockServiceMockRecorder) GetPVZList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVZList", reflect.TypeOf((*MockService)(nil).GetPVZList), ctx)
}

// GetPVZSInfo mocks base method.
func (m *MockService) GetPVZSInfo(ctx context.Context, start, end time.Time, offset, limit int) ([]domain.PvzInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVZSInfo", ctx, start, end, offset, limit)
	ret0, _ := ret[0].([]domain.PvzInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVZSInfo indicates an expected call of GetPVZSInfo.
func (mr *MockServiceMockRecorder) GetPVZSInfo(ctx, start, end, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVZSInfo", reflect.TypeOf((*MockService)(nil).GetPVZSInfo), ctx, start, end, offset, limit)
}

// GetPVZSInfoOptimized mocks base method.
func (m *MockService) GetPVZSInfoOptimized(ctx context.Context, start, end time.Time, offset, limit int) ([]domain.PvzInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVZSInfoOptimized", ctx, start, end, offset, limit)
	ret0, _ := ret[0].([]domain.PvzInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVZSInfoOptimized indicates an expected call of GetPVZSInfoOptimized.
func (mr *MockServiceMockRecorder) GetPVZSInfoOptimized(ctx, start, end, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVZSInfoOptimized", reflect.TypeOf((*MockService)(nil).GetPVZSInfoOptimized), ctx, start, end, offset, limit)
}

// Login mocks base method.
func (m *MockService) Login(ctx context.Context, email, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockServiceMockRecorder) Login(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockService)(nil).Login), ctx, email, password)
}

// Register mocks base method.
func (m *MockService) Register(ctx context.Context, email, password, role string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, email, password, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockServiceMockRecorder) Register(ctx, email, password, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockService)(nil).Register), ctx, email, password, role)
}

// StartReception mocks base method.
func (m *MockService) StartReception(ctx context.Context, pvzID string) (*domain.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReception", ctx, pvzID)
	ret0, _ := ret[0].(*domain.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReception indicates an expected call of StartReception.
func (mr *MockServiceMockRecorder) StartReception(ctx, pvzID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReception", reflect.TypeOf((*MockService)(nil).StartReception), ctx, pvzID)
}
