// Code generated by MockGen. DO NOT EDIT.
// Source: /home/anton/avito-tech-spring/internal/service/pvz_service.go
//
// Generated by this command:
//
//	mockgen --source=/home/anton/avito-tech-spring/internal/service/pvz_service.go --destination=/home/anton/avito-tech-spring/internal/service/mock/pvz_service.go --package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/Ranik23/avito-tech-spring/internal/models/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockPVZService is a mock of PVZService interface.
type MockPVZService struct {
	ctrl     *gomock.Controller
	recorder *MockPVZServiceMockRecorder
	isgomock struct{}
}

// MockPVZServiceMockRecorder is the mock recorder for MockPVZService.
type MockPVZServiceMockRecorder struct {
	mock *MockPVZService
}

// NewMockPVZService creates a new mock instance.
func NewMockPVZService(ctrl *gomock.Controller) *MockPVZService {
	mock := &MockPVZService{ctrl: ctrl}
	mock.recorder = &MockPVZServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPVZService) EXPECT() *MockPVZServiceMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockPVZService) AddProduct(ctx context.Context, pvzID, productType string) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, pvzID, productType)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockPVZServiceMockRecorder) AddProduct(ctx, pvzID, productType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockPVZService)(nil).AddProduct), ctx, pvzID, productType)
}

// CloseReception mocks base method.
func (m *MockPVZService) CloseReception(ctx context.Context, pvzID string) (*domain.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseReception", ctx, pvzID)
	ret0, _ := ret[0].(*domain.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseReception indicates an expected call of CloseReception.
func (mr *MockPVZServiceMockRecorder) CloseReception(ctx, pvzID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseReception", reflect.TypeOf((*MockPVZService)(nil).CloseReception), ctx, pvzID)
}

// CreatePVZ mocks base method.
func (m *MockPVZService) CreatePVZ(ctx context.Context, city string) (*domain.Pvz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePVZ", ctx, city)
	ret0, _ := ret[0].(*domain.Pvz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePVZ indicates an expected call of CreatePVZ.
func (mr *MockPVZServiceMockRecorder) CreatePVZ(ctx, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePVZ", reflect.TypeOf((*MockPVZService)(nil).CreatePVZ), ctx, city)
}

// DeleteLastProduct mocks base method.
func (m *MockPVZService) DeleteLastProduct(ctx context.Context, pvzID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLastProduct", ctx, pvzID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLastProduct indicates an expected call of DeleteLastProduct.
func (mr *MockPVZServiceMockRecorder) DeleteLastProduct(ctx, pvzID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLastProduct", reflect.TypeOf((*MockPVZService)(nil).DeleteLastProduct), ctx, pvzID)
}

// GetPVZList mocks base method.
func (m *MockPVZService) GetPVZList(ctx context.Context) ([]domain.Pvz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVZList", ctx)
	ret0, _ := ret[0].([]domain.Pvz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVZList indicates an expected call of GetPVZList.
func (mr *MockPVZServiceMockRecorder) GetPVZList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVZList", reflect.TypeOf((*MockPVZService)(nil).GetPVZList), ctx)
}

// GetPVZSInfo mocks base method.
func (m *MockPVZService) GetPVZSInfo(ctx context.Context, start, end time.Time, offset, limit int) ([]domain.PvzInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVZSInfo", ctx, start, end, offset, limit)
	ret0, _ := ret[0].([]domain.PvzInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVZSInfo indicates an expected call of GetPVZSInfo.
func (mr *MockPVZServiceMockRecorder) GetPVZSInfo(ctx, start, end, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVZSInfo", reflect.TypeOf((*MockPVZService)(nil).GetPVZSInfo), ctx, start, end, offset, limit)
}

// GetPVZSInfoOptimized mocks base method.
func (m *MockPVZService) GetPVZSInfoOptimized(ctx context.Context, start, end time.Time, offset, limit int) ([]domain.PvzInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVZSInfoOptimized", ctx, start, end, offset, limit)
	ret0, _ := ret[0].([]domain.PvzInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVZSInfoOptimized indicates an expected call of GetPVZSInfoOptimized.
func (mr *MockPVZServiceMockRecorder) GetPVZSInfoOptimized(ctx, start, end, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVZSInfoOptimized", reflect.TypeOf((*MockPVZService)(nil).GetPVZSInfoOptimized), ctx, start, end, offset, limit)
}

// StartReception mocks base method.
func (m *MockPVZService) StartReception(ctx context.Context, pvzID string) (*domain.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReception", ctx, pvzID)
	ret0, _ := ret[0].(*domain.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReception indicates an expected call of StartReception.
func (mr *MockPVZServiceMockRecorder) StartReception(ctx, pvzID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReception", reflect.TypeOf((*MockPVZService)(nil).StartReception), ctx, pvzID)
}
