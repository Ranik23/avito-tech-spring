// Code generated by MockGen. DO NOT EDIT.
// Source: /home/anton/avito-tech-spring/internal/repository/repository.go
//
// Generated by this command:
//
//	mockgen --source=/home/anton/avito-tech-spring/internal/repository/repository.go --destination=/home/anton/avito-tech-spring/internal/repository/mock/repository.go --package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/Ranik23/avito-tech-spring/internal/models/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreatePVZ mocks base method.
func (m *MockRepository) CreatePVZ(ctx context.Context, city string) (*domain.Pvz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePVZ", ctx, city)
	ret0, _ := ret[0].(*domain.Pvz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePVZ indicates an expected call of CreatePVZ.
func (mr *MockRepositoryMockRecorder) CreatePVZ(ctx, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePVZ", reflect.TypeOf((*MockRepository)(nil).CreatePVZ), ctx, city)
}

// CreateProduct mocks base method.
func (m *MockRepository) CreateProduct(ctx context.Context, productType, receptionID string) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, productType, receptionID)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockRepositoryMockRecorder) CreateProduct(ctx, productType, receptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockRepository)(nil).CreateProduct), ctx, productType, receptionID)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, email, hashedPassword, role string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, email, hashedPassword, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, email, hashedPassword, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, email, hashedPassword, role)
}

// DeleteProduct mocks base method.
func (m *MockRepository) DeleteProduct(ctx context.Context, productID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockRepositoryMockRecorder) DeleteProduct(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockRepository)(nil).DeleteProduct), ctx, productID)
}

// FindTheLastProduct mocks base method.
func (m *MockRepository) FindTheLastProduct(ctx context.Context, pvzID string) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTheLastProduct", ctx, pvzID)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTheLastProduct indicates an expected call of FindTheLastProduct.
func (mr *MockRepositoryMockRecorder) FindTheLastProduct(ctx, pvzID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTheLastProduct", reflect.TypeOf((*MockRepository)(nil).FindTheLastProduct), ctx, pvzID)
}

// GetListPVZ mocks base method.
func (m *MockRepository) GetListPVZ(ctx context.Context) ([]domain.Pvz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListPVZ", ctx)
	ret0, _ := ret[0].([]domain.Pvz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListPVZ indicates an expected call of GetListPVZ.
func (mr *MockRepositoryMockRecorder) GetListPVZ(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListPVZ", reflect.TypeOf((*MockRepository)(nil).GetListPVZ), ctx)
}

// GetPVZ mocks base method.
func (m *MockRepository) GetPVZ(ctx context.Context, id string) (*domain.Pvz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVZ", ctx, id)
	ret0, _ := ret[0].(*domain.Pvz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVZ indicates an expected call of GetPVZ.
func (mr *MockRepositoryMockRecorder) GetPVZ(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVZ", reflect.TypeOf((*MockRepository)(nil).GetPVZ), ctx, id)
}

// GetPVZS mocks base method.
func (m *MockRepository) GetPVZS(ctx context.Context, offset, limit int) ([]domain.Pvz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVZS", ctx, offset, limit)
	ret0, _ := ret[0].([]domain.Pvz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVZS indicates an expected call of GetPVZS.
func (mr *MockRepositoryMockRecorder) GetPVZS(ctx, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVZS", reflect.TypeOf((*MockRepository)(nil).GetPVZS), ctx, offset, limit)
}

// GetProducts mocks base method.
func (m *MockRepository) GetProducts(ctx context.Context, receptionID string) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx, receptionID)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockRepositoryMockRecorder) GetProducts(ctx, receptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockRepository)(nil).GetProducts), ctx, receptionID)
}

// GetUser mocks base method.
func (m *MockRepository) GetUser(ctx context.Context, email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepositoryMockRecorder) GetUser(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepository)(nil).GetUser), ctx, email)
}
